{"version":3,"names":["sallaAdvertisementCss","SallaAdvertisement","constructor","hostRef","salla","config","get","onReady","this","currentSlug","advSlot","_a","host","querySelector","innerHTML","isNotVisible","advert","storage","id","setCanDisplayFlag","flag","set","AnimeJS","targets","opacity","duration","height","clientHeight","easing","render","Array","isArray","advertisements","length","map","advertisement","h","class","style","colors","bg","color","text","replace","icon","url","target","description","componentWillLoad","api","fetch","then","resp","ads","data","ad","componentDidRender","setTimeout","closeBtn","addEventListener","querySelectorAll","forEach","el","replaceWith","firstChild","remove"],"sources":["src/components/salla-advertisement/salla-advertisement.scss?tag=salla-advertisement","src/components/salla-advertisement/salla-advertisement.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, State, Element, h } from '@stencil/core';\nimport { Advertisement } from './interfaces';\nimport AnimeJS from 'animejs';\n\n/**\n * @name SallaAdvertisement\n * @description A StencilJS component for handling and displaying advertisements in different pages of salla applications.\n * @tag salla-advertisement\n */\n\n/**\n * @slot adv - Replaces the entire advertisement, has replaceable props `{icon}`, `{url}`, `{target}`, `{description}`, `{bg_color}`, `{text_color}`.\n * */\n@Component({\n  tag: 'salla-advertisement',\n  styleUrl: 'salla-advertisement.scss',\n})\nexport class SallaAdvertisement {\n  /**\n  * Constructor for initializing the component.\n  */\n  constructor() {\n    salla.onReady(() => {\n      this.currentSlug = salla.config.get(\"page.slug\");\n    })\n\n    this.advSlot = this.host.querySelector('[slot=\"adv\"]')?.innerHTML || `<div class=\"s-advertisement-content\"><h2 class=\"s-advertisement-content-main\">{iconElem}{urlElem}</h2>{closeElem}</div>\n    `;\n  }\n  private readonly advSlot: string;\n  // State properties for managing component state\n  @State() position: string;\n  @State() advertisements: Advertisement[];\n  @State() advertIcon: string;\n  @State() currentSlug: string = salla.config.get(\"page.slug\");\n\n  @Element() private host: HTMLElement;\n\n\n  /**\n   * Checks whether an advertisement is marked as not visible/dismissed.\n   * @param advert - The advertisement to check.\n   * @returns True if the advertisement is not visible, false otherwise.\n   */\n  private isNotVisible(advert: Advertisement): boolean {\n    return !!salla.storage.get(`statusAd-${advert.id}`)\n  }\n\n  /**\n   * Sets a flag to control the visibility of an advertisement and triggers an animation when hiding it.\n   * @param advert - The advertisement to update.\n   * @param flag - The flag indicating whether to display or hide the advertisement.\n   */\n  private setCanDisplayFlag(advert: Advertisement, flag: boolean): void {\n    if (!flag) {\n      // Set the statusAd flag to 'dismissed'\n      salla.storage.set(`statusAd-${advert.id}`, 'dismissed');\n      // Trigger an animation to hide the advertisement\n      AnimeJS({\n        targets: this.host,\n        opacity: [1, 0],\n        duration: 300,\n        height: [this.host.clientHeight, 0],\n        easing: 'easeInOutQuad',\n      });\n    }\n  }\n\n  /**\n   * Renders the advertisements based on the fetched data and visibility status.\n   * @returns JSX for rendering advertisements.\n   */\n  render() {\n    if ((Array.isArray(this.advertisements) && !this.advertisements.length) || !this.advertisements) {\n      return;\n    }\n    return this.advertisements.map((advertisement: Advertisement) => {\n      return <div class={{ \"s-hidden\": this.isNotVisible(advertisement), 's-advertisement': true }} data-id={advertisement.id}\n        style={{ \"background-color\": advertisement.colors.bg, \"color\": advertisement.colors.text }}>\n        <div id=\"adv-slot\" innerHTML={\n          this.advSlot\n            // Replace the props with the advertisement data\n            // !Note: The props with the 'Elem' suffix are for internal use only.\n            .replace(\"{iconElem}\", `<i class=\"s-advertisement-content-icon ${advertisement.icon}\"></i>`)\n            .replace(\"{urlElem}\", advertisement.url ? `<a href=\"${advertisement.url}\" target=\"${advertisement.target}\">${advertisement.description}</a>` : advertisement.description)\n            .replace(\"{closeElem}\", `<button class=\"s-advertisement-action\" aria-label=\"close-alert\"><i class=\"sicon-cancel\"></i></button>`)\n            .replace('{icon}', advertisement.icon)\n            .replace('{url}', advertisement.url)\n            .replace('{target}', advertisement.target)\n            .replace('{description}', advertisement.description)\n            .replace('{bg_color}', advertisement.colors.bg)\n            .replace('{text_color}', advertisement.colors.text)\n        }></div>\n      </div>\n    }\n    );\n  }\n\n  /**\n  * Lifecycle method that fetches advertisements before the component is loaded.\n  */\n  async componentWillLoad() {\n    // Fetch advertisements based on the current page\n    await salla.api.advertisement.fetch(this.currentSlug)\n      .then(resp => {\n        let ads = resp.data;\n        if (Array.isArray(ads) && ads.length > 0) {\n          for (const ad of ads) {\n            if (!salla.storage.get(`statusAd-${ad.id}`)) {\n              this.advertisements = [ad];\n              break;\n            }\n          }\n        }\n      })\n  }\n  componentDidRender() {\n    if ((Array.isArray(this.advertisements) && !this.advertisements.length) || !this.advertisements) {\n      return;\n    }\n    // Add event listener for the close button\n    setTimeout(() => {\n      let closeBtn = this.host.querySelector('.s-advertisement-action');\n      if (closeBtn) {\n        closeBtn.addEventListener('click', () => this.setCanDisplayFlag(this.advertisements[0], false));\n      }\n    });\n\n    // Reduce Dom size by removing the slot element\n    this.host.querySelectorAll('#adv-slot').forEach(el => el?.replaceWith(el?.firstChild));\n    this.host.querySelector('[slot=\"adv\"]')?.remove();\n\n    // Trigger an animation to show the advertisement\n    AnimeJS({\n      targets: this.host,\n      opacity: [0, 1],\n      duration: 300,\n      height: [0, this.host.clientHeight],\n      easing: 'easeInOutQuad',\n    });\n  }\n}\n"],"mappings":";;;iFAAA,MAAMA,EAAwB,uB,MCiBjBC,EAAkB,MAI7B,WAAAC,CAAAC,G,iHAa+BC,MAAMC,OAAOC,IAAI,aAZ9CF,MAAMG,SAAQ,KACZC,KAAKC,YAAcL,MAAMC,OAAOC,IAAI,YAAY,IAGlDE,KAAKE,UAAUC,EAAAH,KAAKI,KAAKC,cAAc,mBAAe,MAAAF,SAAA,SAAAA,EAAEG,YAAa,+H,CAkB/D,YAAAC,CAAaC,GACnB,QAASZ,MAAMa,QAAQX,IAAI,YAAYU,EAAOE,K,CAQxC,iBAAAC,CAAkBH,EAAuBI,GAC/C,IAAKA,EAAM,CAEThB,MAAMa,QAAQI,IAAI,YAAYL,EAAOE,KAAM,aAE3CI,EAAQ,CACNC,QAASf,KAAKI,KACdY,QAAS,CAAC,EAAG,GACbC,SAAU,IACVC,OAAQ,CAAClB,KAAKI,KAAKe,aAAc,GACjCC,OAAQ,iB,EASd,MAAAC,GACE,GAAKC,MAAMC,QAAQvB,KAAKwB,kBAAoBxB,KAAKwB,eAAeC,SAAYzB,KAAKwB,eAAgB,CAC/F,M,CAEF,OAAOxB,KAAKwB,eAAeE,KAAKC,GACvBC,EAAA,OAAKC,MAAO,CAAE,WAAY7B,KAAKO,aAAaoB,GAAgB,kBAAmB,MAAM,UAAWA,EAAcjB,GACnHoB,MAAO,CAAE,mBAAoBH,EAAcI,OAAOC,GAAIC,MAASN,EAAcI,OAAOG,OACpFN,EAAA,OAAKlB,GAAG,WAAWJ,UACjBN,KAAKE,QAGFiC,QAAQ,aAAc,0CAA0CR,EAAcS,cAC9ED,QAAQ,YAAaR,EAAcU,IAAM,YAAYV,EAAcU,gBAAgBV,EAAcW,WAAWX,EAAcY,kBAAoBZ,EAAcY,aAC5JJ,QAAQ,cAAe,yGACvBA,QAAQ,SAAUR,EAAcS,MAChCD,QAAQ,QAASR,EAAcU,KAC/BF,QAAQ,WAAYR,EAAcW,QAClCH,QAAQ,gBAAiBR,EAAcY,aACvCJ,QAAQ,aAAcR,EAAcI,OAAOC,IAC3CG,QAAQ,eAAgBR,EAAcI,OAAOG,U,CAUxD,uBAAMM,SAEE5C,MAAM6C,IAAId,cAAce,MAAM1C,KAAKC,aACtC0C,MAAKC,IACJ,IAAIC,EAAMD,EAAKE,KACf,GAAIxB,MAAMC,QAAQsB,IAAQA,EAAIpB,OAAS,EAAG,CACxC,IAAK,MAAMsB,KAAMF,EAAK,CACpB,IAAKjD,MAAMa,QAAQX,IAAI,YAAYiD,EAAGrC,MAAO,CAC3CV,KAAKwB,eAAiB,CAACuB,GACvB,K,OAMZ,kBAAAC,G,MACE,GAAK1B,MAAMC,QAAQvB,KAAKwB,kBAAoBxB,KAAKwB,eAAeC,SAAYzB,KAAKwB,eAAgB,CAC/F,M,CAGFyB,YAAW,KACT,IAAIC,EAAWlD,KAAKI,KAAKC,cAAc,2BACvC,GAAI6C,EAAU,CACZA,EAASC,iBAAiB,SAAS,IAAMnD,KAAKW,kBAAkBX,KAAKwB,eAAe,GAAI,Q,KAK5FxB,KAAKI,KAAKgD,iBAAiB,aAAaC,SAAQC,GAAMA,IAAE,MAAFA,SAAE,SAAFA,EAAIC,YAAYD,IAAE,MAAFA,SAAE,SAAFA,EAAIE,eAC1ErD,EAAAH,KAAKI,KAAKC,cAAc,mBAAe,MAAAF,SAAA,SAAAA,EAAEsD,SAGzC3C,EAAQ,CACNC,QAASf,KAAKI,KACdY,QAAS,CAAC,EAAG,GACbC,SAAU,IACVC,OAAQ,CAAC,EAAGlB,KAAKI,KAAKe,cACtBC,OAAQ,iB"}