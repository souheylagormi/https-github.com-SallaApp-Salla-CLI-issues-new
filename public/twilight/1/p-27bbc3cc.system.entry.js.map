{"version":3,"names":["sallaNotificationsCss","SallaNotifications","exports","class_1","hostRef","_this","this","salla","lang","get","onLoaded","no_notifications_trans","load_more_text_trans","prototype","loading","isLoading","btnText","_a","status","querySelector","Helper","toggleElementClassIf","btnLoader","style","display","getNotificationCard","notification","notificationItem","document","createElement","classList","add","render","showPlaceholder","h","class","alignment","slot","ref","wrapper","hasInfiniteScroll","onClick","loadMore","loadMoreText","handleResponse","notificationsList","map","initiateInfiniteScroll","logger","error","infiniteScroll","initiate","path","nextPage","history","scrollThreshold","button","on","_response","_b","response","pagination","links","next","data","items","host","querySelectorAll","animateItems","_c","e","anime","targets","opacity","duration","translateY","delay","_el","i","easing","complete","_anim","forEach","item","loadInitialData","api","notifications","fetch","per_page","itemPerPage","then","resp","total","setTimeout","append","catch","_d","sent","loadNextPage","componentWillLoad"],"sources":["src/components/salla-notifications/salla-notifications.scss?tag=salla-notifications","src/components/salla-notifications/salla-notifications.tsx"],"sourcesContent":[null,"import { Component, h, State, Prop, Element } from '@stencil/core';\nimport { Notification, Pagination } from \"./interfaces\"\nimport Helper from '../../Helpers/Helper';\nimport anime from 'animejs';\n\n@Component({\n  tag: 'salla-notifications',\n  styleUrl: 'salla-notifications.scss',\n})\nexport class SallaNotifications {\n\n  constructor() {\n    salla.lang.onLoaded(() => {\n      this.no_notifications_trans = salla.lang.get('blocks.header.no_notifications');\n      this.load_more_text_trans = salla.lang.get('common.elements.load_more')\n    })\n  }\n\n  /**\n   * Load more text\n   */\n  @Prop() loadMoreText: string;\n\n  /**\n   * Number of notifications to load per request.\n   */\n  @Prop() itemPerPage: number = 10\n\n  @State() notifications: Notification[] = []\n  @State() pagination: Pagination;\n  @State() hasInfiniteScroll: boolean;\n  @State() total: number;\n  @State() showPlaceholder: boolean;\n  @State() nextPage: string;\n\n  @State() no_notifications_trans = salla.lang.get('blocks.header.no_notifications')\n  @State() load_more_text_trans = salla.lang.get('common.elements.load_more');\n\n  private status: any;\n  private btnLoader: any;\n  private infiniteScroll: any;\n  private wrapper: any;\n\n  @Element() host: HTMLElement;\n\n  // Show/hide loading\n  private loading(isLoading = true) {\n    let btnText = this.status?.querySelector('.s-button-text');\n    if (btnText) {\n      Helper.toggleElementClassIf(btnText, 's-button-hide', 's-button-show', () => isLoading);\n      this.btnLoader.style.display = isLoading ? 'inherit' : 'none';\n    }\n  }\n\n  private getNotificationCard(notification: Notification) {\n    const notificationItem = document.createElement('salla-notification-item') as HTMLSallaNotificationItemElement;\n    notificationItem.notification = notification;\n    notificationItem.classList.add('s-block');\n    return notificationItem;\n  }\n\n\n  render() {\n\n    if (this.showPlaceholder) {\n      return <div class=\"s-notifications-no-content\">\n        <salla-placeholder alignment='center'>\n          <span slot='title'>\n            {this.no_notifications_trans}\n          </span>\n        </salla-placeholder>\n      </div>\n    }\n\n    return <div class=\"s-notifications-wrapper\">\n      <div class=\"s-notifications-container\" ref={wrapper => this.wrapper = wrapper}></div>\n\n      {this.hasInfiniteScroll && (\n        <div class=\"s-infinite-scroll-wrapper\" ref={status => this.status = status}>\n          <button onClick={() => this.loadMore()} class=\"s-infinite-scroll-btn s-button-btn s-button-primary\">\n            <span class=\"s-button-text s-infinite-scroll-btn-text\">{this.loadMoreText ?? this.load_more_text_trans}</span>\n            <span class=\"s-button-loader s-button-loader-center s-infinite-scroll-btn-loader\" ref={btnLoader => this.btnLoader = btnLoader} style={{ \"display\": \"none\" }}></span>\n          </button>\n        </div>\n      )}\n    </div>\n  }\n\n\n  private handleResponse(notificationsList: Notification[]) {\n    return notificationsList.map(notification => this.getNotificationCard(notification))\n  }\n\n  private initiateInfiniteScroll() {\n    if (!this.wrapper) {\n      salla.logger.error('Wrapper is undefined. Cannot initiate infinite scroll.');\n      return;\n    }\n\n    this.infiniteScroll = salla.infiniteScroll.initiate(this.wrapper, this.wrapper, {\n      path: () => this.nextPage,\n      history: true,\n      nextPage: this.nextPage,\n      scrollThreshold: false,\n      status: this.status,\n      button: this.status.querySelector('.s-infinite-scroll-btn'),\n    }, true);\n\n    this.infiniteScroll?.on('request', _response => {\n      this.loading();\n    });\n\n    this.infiniteScroll?.on('load', response => {\n      this.loading(false);\n      this.pagination = response.pagination;\n      this.nextPage = response.pagination.links?.next || null;\n      this.handleResponse(response.data)\n\n      let items = this.host.querySelectorAll('salla-notification-item:not(.animated)');\n      this.animateItems(items);\n    });\n\n    this.infiniteScroll?.on('error', (e) => {\n      salla.logger.error('Error loading more comments:', e);\n    });\n  }\n\n  private animateItems(items: NodeListOf<Element>) {\n    anime({\n      targets: items,\n      opacity: [0, 1],\n      duration: 1200,\n      translateY: [20, 0],\n      delay: function (_el, i) {\n        return i * 100;\n      },\n      easing: 'easeOutExpo',\n      complete: function (_anim) {\n        items.forEach((item: Element) => {\n          item.classList.add('animated');\n        })\n      }\n\n    })\n  }\n\n  private async loadInitialData() {\n    await salla.api.notifications.fetch({\"per_page\": this.itemPerPage})\n      .then(resp => {\n        this.notifications = resp.data\n        this.hasInfiniteScroll = !!resp.pagination.links.next;\n        this.pagination = resp.pagination;\n        this.total = resp.pagination.total;\n        this.nextPage = resp.pagination.links?.next || null;\n\n        setTimeout(() => {\n          this.handleResponse(resp.data).forEach(data => this.wrapper.append(data))\n          this.initiateInfiniteScroll();\n          let items = this.wrapper.querySelectorAll('salla-notification-item:not(.animated)');\n          this.animateItems(items);\n        }, 100)\n      })\n      .catch(error => {\n        salla.logger.error(error)\n        this.showPlaceholder = true;\n        this.loading(false)\n      })\n  }\n\n  // Get next page\n  async loadMore() {\n    this.infiniteScroll?.loadNextPage();\n  }\n\n  async componentWillLoad() {\n    await this.loadInitialData();\n  }\n\n}\n"],"mappings":"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"}