{"version":3,"names":["SallaConditionalFields","exports","class_1","prototype","hideAllOptions","optionId","_this","this","host","querySelectorAll","concat","forEach","field","classList","add","dataset","disableInputs","input","setAttribute","removeAttribute","_a","tagName","toLowerCase","value","includes","getAttribute","hasOwnProperty","checked","changeHandler","event","salla","emit","log","target","name","replace","isMultiple","isEqual","showWhen","trim","isSelected","selectedValues","Array","from","e","toString","showTheInput","remove","closestProductOption","closest","optionRequired","checkboxes","document","isAnyChecked","some","checkbox","getElementsByClassName","length","componentDidRender","optionName","querySelector","render","h","Host"],"sources":["src/components/salla-conditional-fields/salla-conditional-fields.tsx"],"sourcesContent":["import { Component, Element, Host, Listen, h } from '@stencil/core';\n\n/**\n * its to easy to use, currenlty its support select & checkbox input as trigger for show/hide the dom\n * the dom you can put it like this data-show-when=\"{name of the field} {= or !=} {value of the field}\"\n */\n@Component({\n  tag: 'salla-conditional-fields'\n})\nexport class SallaConditionalFields {\n\n  @Element() host: HTMLElement;\n\n  private hideAllOptions(optionId) {\n    this.host.querySelectorAll(`[data-show-when^=\"options[${optionId}\"]`).forEach((field: HTMLElement) => {\n      field.classList.add('hidden');\n      this.hideAllOptions(field.dataset.optionId);\n      this.disableInputs(field);\n    });\n  }\n\n  private disableInputs(field) {\n    field.querySelectorAll('[name]').forEach((input) => {\n\n      input.setAttribute('disabled', '');\n      input.removeAttribute('required');\n      if (input?.tagName?.toLowerCase() === 'select') {\n        input.value = ''\n      }\n      if (['checkbox'].includes(input.getAttribute('type')) && input.hasOwnProperty('checked')) {\n        // @ts-ignore\n        input.checked = false;\n      }\n    });\n  }\n  \n  @Listen('change')\n  changeHandler(event) {\n    salla.event.emit('salla-onditional-fields::change', event);\n    salla.log('Received the change event: ', event);\n\n    if (!event.target || !['SELECT'].includes(event.target.tagName) && !['checkbox'].includes(event.target.getAttribute('type'))) {\n      salla.log('Ignore the change because is not support input: ' + (event?.target?.tagName || 'N/A'));\n      return;\n    }\n\n    // to extract the option id from the input name, the supported names are name[*] and name[*][]\n    let optionId = event.target.name.replace('[]', '');\n    let isMultiple = event.target.getAttribute('type') === 'checkbox';\n\n\n    salla.log('Trying to find all the element with condition:', `[data-show-when^=\"${optionId}\"]`);\n\n    this.host.querySelectorAll(`[data-show-when^=\"${optionId}\"]`)\n      .forEach((field: HTMLElement) => {\n        let isEqual = !field?.dataset.showWhen.includes('!=');\n        let value = field?.dataset.showWhen.replace(/(.*)(=|!=)(.*)/gm, '$3').trim();\n        // let isSelected = isMultiple ? event.target?.checked : value === event.target.value;\n        let isSelected;\n\n        if (isMultiple) {\n          // @ts-ignore\n          let selectedValues = Array.from(this.host.querySelectorAll(`input[name=\"${event.target.name}\"]:checked`), e => e?.value);\n          isSelected = selectedValues.includes(value.toString());\n        } else {\n          isSelected = value === event.target.value;\n        }\n\n        salla.log('The input is ', (isMultiple ? 'Multiple' : 'Single'), ' value:', isSelected);\n\n        let showTheInput = (isEqual && isSelected) || (!isEqual && !isSelected);\n        if (showTheInput) {\n          field.classList.remove('hidden');\n          field.querySelectorAll('[name]').forEach((input) => {\n            input.removeAttribute('disabled');\n\n\n            // Return required attribute to the input if the option is required\n            const closestProductOption = (input as HTMLInputElement).closest('.s-product-options-option') as HTMLElement;\n            if (closestProductOption.dataset.optionRequired === 'true') {\n              input.setAttribute('required', '');\n            }\n\n\n            // Handle multiple checkboxes with same name and required attribute \n            if (input.getAttribute('type') === 'checkbox') {\n              const checkboxes = Array.from(document.querySelectorAll(`input[type=\"checkbox\"][name=\"${input.getAttribute('name')}\"]`)) as HTMLInputElement[];\n              const isAnyChecked = checkboxes.some((checkbox) => checkbox.checked);      \n              if (isAnyChecked) {\n                checkboxes.forEach((checkbox) => {\n                  checkbox.removeAttribute('required');\n                });\n              }\n            }\n            //To handle focus on hidden input error\n            if (!['checkbox'].includes(input.getAttribute('type')) && field.getElementsByClassName('required').length) {\n              input.setAttribute('required', '');\n            }\n          });\n        } else {\n          this.hideAllOptions(field.dataset.optionId);\n          field.classList.add('hidden');\n          this.disableInputs(field);\n        }\n      });\n  }\n\n  componentDidRender() {\n    this.host.querySelectorAll(`[data-show-when]`).forEach((field) => {\n      // @ts-ignore\n      let optionName = field?.dataset?.showWhen.replace(/(.*)(=|!=)(.*)/gm, '$1').trim();\n      if (!optionName) {\n        return;\n      }\n\n      this.changeHandler({\n        target: this.host.querySelector('[name^=\"' + optionName + '\"]')\n      })\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}